package connect.ejb;

import java.util.Hashtable;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import entities.Vehicles;
import services.VehiclesManager;
import services.VehiclesManagerImpl;


public class Client {
	public static void main(String[] args) throws Exception {
		invokeStatelessBean();
	}

	private static void invokeStatelessBean() throws NamingException {
		// TODO Auto-generated method stub
	    final VehiclesManager statelessRemoteCalculator = lookupRemoteStatelessCalculator();
        System.out.println("Obtained a remote stateless calculator for invocation");
        // invoke on the remote calculator
        String marque = "Peugeot";
        String type = "Voiture";
        List<String> options;
        options.add("option1");
        options.add("option2");
        double prix = 10.25;
        String devise = "euros";
        int stock = 10;
        
        System.out.println("Tentative de création d'un véhicule de marque Peugeot.");
        Vehicles vc = statelessRemoteCalculator.createVehicles(marque,type,options,stock,prix,devise);
        System.out.println(vc.getMarque() + " added");
        
        System.out.println("Tentative de création d'un véhicule de marque Peugeot.");
        vc = statelessRemoteCalculator.createVehicles(marque,type,options,stock,prix,devise);
        System.out.println(vc.getMarque() + " added");
        
        List<Vehicles> myVehicles = statelessRemoteCalculator.findAllVehicles();
        System.out.println(myVehicles + " found");
        
        
	}

	   private static VehiclesManager lookupRemoteStatelessCalculator() throws NamingException {
	        final Hashtable jndiProperties = new Hashtable();
	        jndiProperties.put(Context.URL_PKG_PREFIXES, "org.jboss.ejb.client.naming");
	        final Context context = new InitialContext(jndiProperties);
	        // The app name is the application name of the deployed EJBs. This is typically the ear name
	        // without the .ear suffix. However, the application name could be overridden in the application.xml of the
	        // EJB deployment on the server.
	        // Since we haven't deployed the application as a .ear, the app name for us will be an empty string
	        final String appName = "VehiclesManagerComponent";
	        // This is the module name of the deployed EJBs on the server. This is typically the jar name of the
	        // EJB deployment, without the .jar suffix, but can be overridden via the ejb-jar.xml
	        // In this example, we have deployed the EJBs in a jboss-as-ejb-remote-app.jar, so the module name is
	        // jboss-as-ejb-remote-app
	        final String moduleName = "VehiclesManagerService";
	        // AS7 allows each deployment to have an (optional) distinct name. We haven't specified a distinct name for
	        // our EJB deployment, so this is an empty string
	        final String distinctName = "";
	        // The EJB name which by default is the simple class name of the bean implementation class
	        final String beanName = VehiclesManagerImpl.class.getSimpleName();
	        // the remote view fully qualified class name
	        final String viewClassName = VehiclesManager.class.getName();
	        // let's do the lookup
	        return (VehiclesManager) context.lookup("ejb:" + appName + "/" + moduleName + "/" + distinctName + "/" + beanName + "!" + viewClassName);
	    }
}
